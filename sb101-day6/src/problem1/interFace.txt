Q1 - Write down some predefined Functional interfaces in the java library at least 4 interfaces, with their methods.
--------------------------------------------------------------------------------------------------------------------
 functional interface is an interface that contains only one abstract method. They can have only one functionality to exhibit. From Java 8 onwards, lambda expressions can be used to represent the instance of a functional interface. A functional interface can have any number of default methods. Runnable, ActionListener, Comparable are some of the examples of functional interfaces. 

Functional Interface is additionally recognized as Single Abstract Method Interfaces. In short, they are also known as SAM interfaces. Functional interfaces in Java are the new feature that provides users with the approach of fundamental programming. 

Inbuilt functional interfaces:
------------------------------

1) Predicate Interface
----------------------
The Predicate interface has only one single method test(). It may be true or false depending on the values of its variables.

Example
import java.util.*;
import java.util.function.*;

public class PredicateTest {
   private static List getBeginWith(List<String> list, Predicate<String> valid) {
      List<String> selected = new ArrayList<>();
      list.forEach(country -> {     // lambda expression
         if(valid.test(country)) {
            selected.add(country);
         }
      });
      return selected;
   }
   public static void main(String[] args) {
      String[] countries = {"India", "Australia", "England", "South Africa", "Srilanka", "Newzealand", "West Indies"};
      List<String> countryList = Arrays.asList(countries);
         System.out.println(getBeginWith(countryList, (s) -> s.startsWith("A")));
         System.out.println(getBeginWith(countryList, (s) -> s.contains("W")));
         System.out.println(getBeginWith(countryList, (s) -> s.endsWith("nd")));
   }
}


2) Consumer Interface:
----------------------
The Consumer interface has only one single method called accept(). It accepts a single argument of any data type and does not return any result.

Example
import java.util.*;
import java.util.function.*;

public class ConsumerTest {
   public static void main(String[] args) {
      String[] countries = {"India", "Australia", "England", "South Africa", "Srilanka", "Newzealand", "West Indies"};
      System.out.print("The list of countries:\n");
      Arrays.asList(countries).forEach((country) -> System.out.println(country)); // lambda expression
   }
}


3) Supplier Interface:
----------------------
A Supplier interface has only one single method called get(). It does not accept any arguments and returns an object of any data type.

Example
import java.util.*;
import java.util.function.*;

public class SupplierTest {
   private static void printNames(Supplier<String> arg) {
      System.out.println(arg.get());
   }
   private static void listBeginWith(List<String> list, Predicate<String> valid) {
      printNames(() -> "\nList of countries:");
      list.forEach(country -> {     // lambda expression
         if(valid.test(country)) {
            printNames(() -> country);
         }
      });
   }
   public static void main(String[] args) {
      String[] countries = {"India", "Australia", "England", "South Africa", "Srilanka", "Newzealand", "West Indies"};
      List<String> countryList = Arrays.asList(countries);
      listBeginWith(countryList, (s) -> s.startsWith("I"));
      listBeginWith(countryList, (s) -> s.contains("I"));
      listBeginWith(countryList, (s) -> s.endsWith("ia"));
   }
}




4) Function Interface:
----------------------
The Function interface has only one single method apply(). It can accept an object of any data type and returns a result of any datatype.

Example
import java.util.*;
import java.util.function.*;

public class FunctionTest {
   public static void main(String args[]) {
      String[] countries = {"India", "Australia", "England", "South Africa", "Srilanka", "Newzealand", "West Indies", "Scotland"};
      Function<String[], String> converter = (all) -> {  // lambda expression
         String names = "";
         for(String n : all) {
            String result = n.substring(0, n.indexOf(""));
            result = n.substring(n.indexOf("")) + " " + result;
            names += result + "\n";
         }
         return names;
      };
      System.out.println(converter.apply(countries));
   }
}