import java.io.DataInputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;

public class Main {

    private static long[] after_left;

    private static void run() throws IOException {
        long ans = 0;

        int n = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
            if (a[i] == 0) {
                ans++;
            }
        }

        after_left = new long[n];
        after_left[0] = a[0];
        for (int i = 1; i < n; i++) {
            after_left[i] = a[i] - after_left[i - 1];
        }

        IndexMap[] indexMaps = new IndexMap[2];
        indexMaps[0] = new IndexMap();
        indexMaps[1] = new IndexMap();
        for (int i = 0; i < n; i++) {
            int finalI = i;
            indexMaps[i & 1].compute(after_left[i], (key, value) -> {
                if (value == null) {
                    value = new ArrayList<>();
                }
                value.add(finalI);
                return value;
            });
        }

        nodes = new Node[4 * n + 10];
        init(0, n - 1, 1);


        for (int i = 0; i < n - 1; i++) {
            long diff = a[i] - after_left[i];

            int left = i;
            int right = n - 1;

            while (left < right) {
                int mid = (left + right + 1) >> 1;

                query_result[0] = Long.MAX_VALUE;
                query_result[1] = Long.MAX_VALUE;
                query(i, mid, 1);

                if (query_result[i & 1] + diff < 0 || query_result[(i + 1 & 1)] - diff < 0) {
                    right = mid - 1;
                } else {
                    left = mid;
                }
            }

            if (left == i) continue;

            ans += count_index_between(indexMaps[i & 1], -diff, i + 1, left);
            ans += count_index_between(indexMaps[(i + 1) & 1], diff, i + 1, left);
        }

        out.println(ans);
    }

    private static long count_index_between(IndexMap indexMap, long key, int left, int right) {
        ArrayList<Integer> indexes = indexMap.get(key);
        if (indexes == null) return 0;

        return find_index_higher(indexes, right + 1) - find_index_higher(indexes, left);
    }

    private static int find_index_higher(ArrayList<Integer> arrayList, int target) {
        int left = 0;
        int right = arrayList.size() - 1;
        while (left < right) {
            int mid = (left + right) >> 1;
            if (arrayList.get(mid) < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return arrayList.get(left) >= target ? left : left + 1;
    }

    private static Node[] nodes;

    private static final long[] query_result = new long[2];

    private static void query(int left, int right, int p) {
        if (nodes[p].left == left && nodes[p].right == right) {
            query_result[0] = Math.min(query_result[0], nodes[p].min_0);
            query_result[1] = Math.min(query_result[1], nodes[p].min_1);
            return;
        }

        int mid = (nodes[p].left + nodes[p].right) >> 1;
        if (left > mid) {
            query(left, right, p * 2 + 1);
        } else if (right <= mid) {
            query(left, right, p * 2);
        } else {
            query(left, mid, p * 2);
            query(mid + 1, right, p * 2 + 1);
        }
    }

    private static void init(int left, int right, int p) {
        nodes[p] = new Node();
        nodes[p].left = left;
        nodes[p].right = right;

        if (left == right) {
            if ((left & 1) == 0) {
                nodes[p].min_0 = after_left[left];
                nodes[p].min_1 = Long.MAX_VALUE;
            } else {
                nodes[p].min_1 = after_left[left];
                nodes[p].min_0 = Long.MAX_VALUE;
            }
            return;
        }

        int mid = (left + right) >> 1;
        init(left, mid, p * 2);
        init(mid + 1, right, p * 2 + 1);

        nodes[p].min_0 = Math.min(nodes[p * 2].min_0, nodes[p * 2 + 1].min_0);
        nodes[p].min_1 = Math.min(nodes[p * 2].min_1, nodes[p * 2 + 1].min_1);
    }

    private static class Node {
        int left, right;
        long min_0, min_1;
    }

    private static class IndexMap extends HashMap<Long, ArrayList<Integer>> {

    }

    public static void main(String[] args) throws IOException {
        in = new Reader();
        out = new PrintWriter(new OutputStreamWriter(System.out));

        int t = in.nextInt();
        for (int i = 0; i < t; i++) {
            run();
        }

        out.flush();
        in.close();
        out.close();
    }

    private static int gcd(int a, int b) {
        if (a == 0 || b == 0)
            return 0;
        while (b != 0) {
            int tmp;
            tmp = a % b;
            a = b;
            b = tmp;
        }
        return a;
    }

    static final long mod = 1000000007;

    static long pow_mod(long a, long b) {
        long result = 1;
        while (b != 0) {
            if ((b & 1) != 0) result = (result * a) % mod;
            a = (a * a) % mod;
            b >>= 1;
        }
        return result;
    }

    private static long multiplied_mod(long... longs) {
        long ans = 1;
        for (long now : longs) {
            ans = (ans * now) % mod;
        }
        return ans;
    }

    @SuppressWarnings("FieldCanBeLocal")
    private static Reader in;
    private static PrintWriter out;

    private static int[] read_int_array(int len) throws IOException {
        int[] a = new int[len];
        for (int i = 0; i < len; i++) {
            a[i] = in.nextInt();
        }
        return a;
    }

    private static long[] read_long_array(int len) throws IOException {
        long[] a = new long[len];
        for (int i = 0; i < len; i++) {
            a[i] = in.nextLong();
        }
        return a;
    }

    private static void print_array(int[] array) {
        for (int now : array) {
            out.print(now);
            out.print(' ');
        }
        out.println();
    }

    private static void print_array(long[] array) {
        for (long now : array) {
            out.print(now);
            out.print(' ');
        }
        out.println();
    }

    static class Reader {
        private static final int BUFFER_SIZE = 1 << 16;
        private final DataInputStream din;
        private final byte[] buffer;
        private int bufferPointer, bytesRead;

        Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException {
            final byte[] buf = new byte[1024]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    break;
                }
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextSign() throws IOException {
            byte c = read();
            while ('+' != c && '-' != c) {
                c = read();
            }
            return '+' == c ? 0 : 1;
        }

        private static boolean isSpaceChar(int c) {
            return !(c >= 33 && c <= 126);
        }

        public int skip() throws IOException {
            int b;
            // noinspection ALL
            while ((b = read()) != -1 && isSpaceChar(b)) {
                ;
            }
            return b;
        }

        public char nc() throws IOException {
            return (char) skip();
        }

        public String next() throws IOException {
            int b = skip();
            final StringBuilder sb = new StringBuilder();
            while (!isSpaceChar(b)) { // when nextLine, (isSpaceChar(b) && b != ' ')
                sb.appendCodePoint(b);
                b = read();
            }
            return sb.toString();
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            final boolean neg = c == '-';
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg) {
                return -ret;
            }
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            final boolean neg = c == '-';
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg) {
                return -ret;
            }
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            final boolean neg = c == '-';
            if (neg) {
                c = read();
            }

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg) {
                return -ret;
            }
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) {
                buffer[0] = -1;
            }
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead) {
                fillBuffer();
            }
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            din.close();
        }

    }
}