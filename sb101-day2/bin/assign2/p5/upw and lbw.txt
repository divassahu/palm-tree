Q5) Explain Difference between Upper Bounded Wildcards and Lower Bounded Wildcards with Example.
------------------------------------------------------------------------------------------------
1. Upper Bounded Wildcards: 
---------------------------
These wildcards can be used when you want to relax the restrictions on a variable. For example, say you want to write a method that works on List < Integer >, List < Double >, and List < Number >, you can do this using an upper bounded wildcard. 

To declare an upper-bounded wildcard, use the wildcard character (‘?’), followed by the extends keyword, followed by its upper bound. 

Syntax-public static void add(List<? extends Number> list);

example-

import java.util.Arrays;
import java.util.List;
 
import java.util.Arrays;
import java.util.List;
 
class WildcardDemo {
    public static void main(String[] args)
    {
 
        // Upper Bounded Integer List
        List<Integer> list1 = Arrays.asList(4, 5, 6, 7);
 
        // printing the sum of elements in list
        System.out.println("Total sum is:" + sum(list1));
 
        // Double list
        List<Double> list2 = Arrays.asList(4.1, 5.1, 6.1);
 
        // printing the sum of elements in list
        System.out.print("Total sum is:" + sum(list2));
    }
 
    private static double sum(List<? extends Number> list)
    {
        double sum = 0.0;
        for (Number i : list) {
            sum += i.doubleValue();
        }
 
        return sum;
    }
}
 

2. Lower Bounded Wildcards: 
---------------------------
It is expressed using the wildcard character (‘?’), followed by the super keyword, followed by its lower bound: <? super A>. 

 Syntax: Collectiontype <? super A>

Example:
------- 


// Java program to demonstrate Lower Bounded Wildcards
 
import java.util.Arrays;
import java.util.List;
 
class WildcardDemo {
    public static void main(String[] args)
    {
        // Lower Bounded Integer List
        List<Integer> list1 = Arrays.asList(4, 5, 6, 7);
 
        // Integer list object is being passed
        printOnlyIntegerClassorSuperClass(list1);
 
        // Number list
        List<Number> list2 = Arrays.asList(4, 5, 6, 7);
 
        // Integer list object is being passed
        printOnlyIntegerClassorSuperClass(list2);
    }
 
    public static void printOnlyIntegerClassorSuperClass(
        List<? super Integer> list)
    {
        System.out.println(list);
    }
}


