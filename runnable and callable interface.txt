A Runnable is a functional interface in Java that represents a task that can be executed by a thread. It has a single method, run(), which contains the code that will be executed by the thread.

A Callable is also a functional interface in Java, similar to Runnable but with a different method signature. It has a single method call() which can return a value and throws an exception.

A key difference between the two is that Callable.call() returns a value and can throw a checked exception, while Runnable.run() does not return a value and cannot throw a checked exception.

In short, Runnable is used when you want to execute a piece of code in a thread and don't need to return any value, while Callable is used when you want to execute a piece of code in a thread and return a value.

Advantages of Runnable:

Simple to use: Runnable is a functional interface with a single method run() which is easy to implement and understand.
Does not throw checked exception: Runnable's run() method does not throw checked exceptions, which makes it suitable for tasks that do not need to handle exceptional cases.
Disadvantages of Runnable:

No return value: Runnable's run() method does not return any value, so it is not suitable for tasks that need to return a result.
No cancelation or interruption: Runnable does not provide any way to cancel or interrupt a running task.
Advantages of Callable:

Return value: Callable's call() method can return a value, making it suitable for tasks that need to return a result.
Exception handling: Callable's call() method can throw checked exceptions, making it suitable for tasks that need to handle exceptional cases.
Disadvantages of Callable:

More complex: Callable is a functional interface with a single method call() which can throw checked exceptions and return a value, which makes it more complex to implement and understand than Runnable.
Need to handle exception: Callable's call() method can throw checked exceptions, which requires the developer to handle them explicitly.
Application:

Runnable is typically used for short-lived tasks that do not need to return a value or handle exceptional cases, such as updating the UI in a GUI application.
Callable is typically used for long-lived tasks that need to return a value or handle exceptional cases, such as performing a computation that may take a long time or accessing a resource that may throw an exception.
In general, the choice between Runnable and Callable depends on the specific requirements of the task you are trying to accomplish. If you only need to execute a piece of code in a thread and don't need to return any value or handle exceptional cases, you should use Runnable. If you need to execute a piece of code in a thread and return a value or handle exceptional cases, you should use Callable.


Runnable task = new Runnable() {
    public void run() {
        while (true) {
            System.out.println("The time is: " + new Date());
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
};

Thread thread = new Thread(task);
thread.start();

Callable<Integer> task = new Callable<Integer>() {
    public Integer call() throws Exception {
        int result = 1;
        for (int i = 2; i <= 10; i++) {
            result *= i;
        }
        return result;
    }
};

ExecutorService executor = Executors.newSingleThreadExecutor();
Future<Integer> future = executor.submit(task);

try {
    System.out.println("The factorial of 10 is: " + future.get());
} catch (InterruptedException | ExecutionException e) {
    e.printStackTrace();
}
executor.shutdown();


In this example, a new Callable object is created and assigned to the variable task. The call() method of the Callable object is implemented to calculate the factorial of 10 and return the result. Then an ExecutorService is created and the task is submitted to it. The result of the task is obtained by calling the get() method of the Future object returned by the submit() method.