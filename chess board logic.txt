// ChessBoard.java
public class ChessBoard {
    private ChessPiece[][] board; // 2D array to represent the board

    public ChessBoard() {
        board = new ChessPiece[8][8]; // initialize the board to be 8x8
        initializePieces(); // place the pieces on the board
    }

    private void initializePieces() {
        // place the pawns on the board
        for (int i = 0; i < 8; i++) {
            board[1][i] = new Pawn(true); // white pawns
            board[6][i] = new Pawn(false); // black pawns
        }

        // place the other pieces on the board
        board[0][0] = new Rook(true);
        board[0][1] = new Knight(true);
        board[0][2] = new Bishop(true);
        board[0][3] = new Queen(true);
        board[0][4] = new King(true);
        board[0][5] = new Bishop(true);
        board[0][6] = new Knight(true);
        board[0][7] = new Rook(true);

        board[7][0] = new Rook(false);
        board[7][1] = new Knight(false);
        board[7][2] = new Bishop(false);
        board[7][3] = new Queen(false);
        board[7][4] = new King(false);
        board[7][5] = new Bishop(false);
        board[7][6] = new Knight(false);
        board[7][7] = new Rook(false);
    }
}
// ChessPiece.java
public abstract class ChessPiece {
    protected boolean isWhite;

    public ChessPiece(boolean isWhite) {
        this.isWhite = isWhite;
    }

    public abstract boolean canMove(int x1, int y1, int x2, int y2);
}


// Pawn.java
public class Pawn extends ChessPiece {
    public Pawn(boolean isWhite) {
        super(isWhite);
    }

    @Override
    public boolean canMove(int x1, int y1, int x2, int y2) {
        // logic for pawn's move
    }
}