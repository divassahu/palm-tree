import java.util.Scanner;

public class TicTacToe {

    // 2D array to represent the game board
    private static char[][] board = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};

    // Constant variables to represent the players
    private static final char PLAYER_X = 'X';
    private static final char PLAYER_O = 'O';

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // variable to keep track of the current player
        char currentPlayer = PLAYER_X;

        // variable to keep track of the number of turns
        int turns = 0;

        while (true) {
            printBoard();
            System.out.print("Player " + currentPlayer + ", enter row and column (0, 1, 2) for your move: ");
            int row = scanner.nextInt();
            int col = scanner.nextInt();

            // validate the input
            if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
                board[row][col] = currentPlayer;
                turns++;
            } else {
                System.out.println("Invalid move! Try again.");
                continue;
            }

            // check for a win or a draw
            if (checkWin(currentPlayer)) {
                printBoard();
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            } else if (turns == 9) {
                printBoard();
                System.out.println("It's a draw!");
                break;
            }

            // switch to the other player
            currentPlayer = (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
        }
        scanner.close();
    }

    // function to print the game board
    private static void printBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print("| " + board[i][j] + " ");
            }
            System.out.println("|");
        }
    }

    // function to check for a win
    private static boolean checkWin(char player) {
        // check rows
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
        }

        // check columns
        for (int i = 0; i < 3; i++) {
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }

        // check diagonals
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[
